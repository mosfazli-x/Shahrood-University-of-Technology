
AVRASM ver. 2.1.30  H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm Fri Dec 17 18:41:13 2021

H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1088): warning: Register r4 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1089): warning: Register r5 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1090): warning: Register r6 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1091): warning: Register r7 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1092): warning: Register r9 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1093): warning: Register r8 already defined by the .DEF directive
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 006a 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6176
000034 756c
000035 3d65
000036 6425      	.DB  0x76,0x61,0x6C,0x75,0x65,0x3D,0x25,0x64
H:\University\Unit 5\Microprosessor\Exercise 5\1\Debug\List\1.asm(1133): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0x0
                 _0x2020003:
000038 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000039 0002      	.DW  0x02
00003a 0271      	.DW  __base_y_G101
00003b 0070      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bffb      	OUT  GICR,R31
000042 bfeb      	OUT  GICR,R30
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000062 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000063 bfed      	OUT  SPL,R30
000064 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000065 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000066 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000067 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000068 940c 0076 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#asm
                     .equ __lcd_port=0x12;
                 ; 0000 0005 #endasm
                 ;#include <lcd.h>
                 ;
                 ;char str[17];
                 ;unsigned int i,j;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00006a 93ea      	ST   -Y,R30
00006b 93fa      	ST   -Y,R31
00006c b7ef      	IN   R30,SREG
00006d 93ea      	ST   -Y,R30
                 ; 0000 000D 
                 ; 0000 000E i++;
00006e 01f2      	MOVW R30,R4
00006f 9631      	ADIW R30,1
000070 012f      	MOVW R4,R30
                 ; 0000 000F 
                 ; 0000 0010 }
000071 91e9      	LD   R30,Y+
000072 bfef      	OUT  SREG,R30
000073 91f9      	LD   R31,Y+
000074 91e9      	LD   R30,Y+
000075 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0013 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0014 // Declare your local variables here
                 ; 0000 0015 
                 ; 0000 0016 // Input/Output Ports initialization
                 ; 0000 0017 // Port A initialization
                 ; 0000 0018 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0019 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000076 e0e0      	LDI  R30,LOW(0)
000077 bbea      	OUT  0x1A,R30
                 ; 0000 001A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000078 bbeb      	OUT  0x1B,R30
                 ; 0000 001C 
                 ; 0000 001D // Port B initialization
                 ; 0000 001E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000079 bbe7      	OUT  0x17,R30
                 ; 0000 0020 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0021 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00007a bbe8      	OUT  0x18,R30
                 ; 0000 0022 
                 ; 0000 0023 // Port C initialization
                 ; 0000 0024 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0025 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00007b bbe4      	OUT  0x14,R30
                 ; 0000 0026 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0027 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007c bbe5      	OUT  0x15,R30
                 ; 0000 0028 
                 ; 0000 0029 // Port D initialization
                 ; 0000 002A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00007d bbe1      	OUT  0x11,R30
                 ; 0000 002C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00007e bbe2      	OUT  0x12,R30
                 ; 0000 002E 
                 ; 0000 002F // Timer/Counter 0 initialization
                 ; 0000 0030 // Clock source: System Clock
                 ; 0000 0031 // Clock value: 7.813 kHz
                 ; 0000 0032 // Mode: Normal top=0xFF
                 ; 0000 0033 // OC0 output: Disconnected
                 ; 0000 0034 // Timer Period: 32.768 ms
                 ; 0000 0035 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00007f e0e5      	LDI  R30,LOW(5)
000080 bfe3      	OUT  0x33,R30
                 ; 0000 0036 TCNT0=0x00;
000081 e0e0      	LDI  R30,LOW(0)
000082 bfe2      	OUT  0x32,R30
                 ; 0000 0037 OCR0=0x00;
000083 bfec      	OUT  0x3C,R30
                 ; 0000 0038 
                 ; 0000 0039 // Timer/Counter 1 initialization
                 ; 0000 003A // Clock source: System Clock
                 ; 0000 003B // Clock value: Timer1 Stopped
                 ; 0000 003C // Mode: Normal top=0xFFFF
                 ; 0000 003D // OC1A output: Disconnected
                 ; 0000 003E // OC1B output: Disconnected
                 ; 0000 003F // Noise Canceler: Off
                 ; 0000 0040 // Input Capture on Falling Edge
                 ; 0000 0041 // Timer1 Overflow Interrupt: Off
                 ; 0000 0042 // Input Capture Interrupt: Off
                 ; 0000 0043 // Compare A Match Interrupt: Off
                 ; 0000 0044 // Compare B Match Interrupt: Off
                 ; 0000 0045 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000084 bdef      	OUT  0x2F,R30
                 ; 0000 0046 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000085 bdee      	OUT  0x2E,R30
                 ; 0000 0047 TCNT1H=0x00;
000086 bded      	OUT  0x2D,R30
                 ; 0000 0048 TCNT1L=0x00;
000087 bdec      	OUT  0x2C,R30
                 ; 0000 0049 ICR1H=0x00;
000088 bde7      	OUT  0x27,R30
                 ; 0000 004A ICR1L=0x00;
000089 bde6      	OUT  0x26,R30
                 ; 0000 004B OCR1AH=0x00;
00008a bdeb      	OUT  0x2B,R30
                 ; 0000 004C OCR1AL=0x00;
00008b bdea      	OUT  0x2A,R30
                 ; 0000 004D OCR1BH=0x00;
00008c bde9      	OUT  0x29,R30
                 ; 0000 004E OCR1BL=0x00;
00008d bde8      	OUT  0x28,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 2 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer2 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFF
                 ; 0000 0054 // OC2 output: Disconnected
                 ; 0000 0055 ASSR=0<<AS2;
00008e bde2      	OUT  0x22,R30
                 ; 0000 0056 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00008f bde5      	OUT  0x25,R30
                 ; 0000 0057 TCNT2=0x00;
000090 bde4      	OUT  0x24,R30
                 ; 0000 0058 OCR2=0x00;
000091 bde3      	OUT  0x23,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000092 e0e1      	LDI  R30,LOW(1)
000093 bfe9      	OUT  0x39,R30
                 ; 0000 005C 
                 ; 0000 005D // External Interrupt(s) initialization
                 ; 0000 005E // INT0: Off
                 ; 0000 005F // INT1: Off
                 ; 0000 0060 // INT2: Off
                 ; 0000 0061 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000094 e0e0      	LDI  R30,LOW(0)
000095 bfe5      	OUT  0x35,R30
                 ; 0000 0062 MCUCSR=(0<<ISC2);
000096 bfe4      	OUT  0x34,R30
                 ; 0000 0063 
                 ; 0000 0064 // USART initialization
                 ; 0000 0065 // USART disabled
                 ; 0000 0066 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000097 b9ea      	OUT  0xA,R30
                 ; 0000 0067 
                 ; 0000 0068 // Analog Comparator initialization
                 ; 0000 0069 // Analog Comparator: Off
                 ; 0000 006A // The Analog Comparator's positive input is
                 ; 0000 006B // connected to the AIN0 pin
                 ; 0000 006C // The Analog Comparator's negative input is
                 ; 0000 006D // connected to the AIN1 pin
                 ; 0000 006E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000098 e8e0      	LDI  R30,LOW(128)
000099 b9e8      	OUT  0x8,R30
                 ; 0000 006F SFIOR=(0<<ACME);
00009a e0e0      	LDI  R30,LOW(0)
00009b bfe0      	OUT  0x30,R30
                 ; 0000 0070 
                 ; 0000 0071 // ADC initialization
                 ; 0000 0072 // ADC disabled
                 ; 0000 0073 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00009c b9e6      	OUT  0x6,R30
                 ; 0000 0074 
                 ; 0000 0075 // SPI initialization
                 ; 0000 0076 // SPI disabled
                 ; 0000 0077 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00009d b9ed      	OUT  0xD,R30
                 ; 0000 0078 
                 ; 0000 0079 // TWI initialization
                 ; 0000 007A // TWI disabled
                 ; 0000 007B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00009e bfe6      	OUT  0x36,R30
                 ; 0000 007C 
                 ; 0000 007D // Global enable interrupts
                 ; 0000 007E #asm("sei")
00009f 9478      	sei
                 ; 0000 007F 
                 ; 0000 0080 lcd_init(16);
0000a0 e1a0      	LDI  R26,LOW(16)
0000a1 940e 0310 	CALL _lcd_init
                 ; 0000 0081 
                 ; 0000 0082 while (1)
                 _0x3:
                 ; 0000 0083       {
                 ; 0000 0084       if(i > 32){
0000a3 e2e0      	LDI  R30,LOW(32)
0000a4 e0f0      	LDI  R31,HIGH(32)
0000a5 15e4      	CP   R30,R4
0000a6 05f5      	CPC  R31,R5
0000a7 f428      	BRSH _0x6
                 ; 0000 0085       i=0;
0000a8 2444      	CLR  R4
0000a9 2455      	CLR  R5
                 ; 0000 0086       j++;
0000aa 01f3      	MOVW R30,R6
0000ab 9631      	ADIW R30,1
0000ac 013f      	MOVW R6,R30
                 ; 0000 0087       }
                 ; 0000 0088       sprintf(str,"value=%d",j);
                 _0x6:
0000ad e6e0      	LDI  R30,LOW(_str)
0000ae e0f2      	LDI  R31,HIGH(_str)
0000af 93fa      	ST   -Y,R31
0000b0 93ea      	ST   -Y,R30
                +
0000b1 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b3 93fa      	ST   -Y,R31
0000b4 93ea      	ST   -Y,R30
0000b5 01f3      	MOVW R30,R6
0000b6 2766      	CLR  R22
0000b7 2777      	CLR  R23
0000b8 940e 03a1 	CALL __PUTPARD1
0000ba e084      	LDI  R24,4
0000bb 940e 023d 	CALL _sprintf
0000bd 9628      	ADIW R28,8
                 ; 0000 0089       lcd_gotoxy(0,0);
0000be e0e0      	LDI  R30,LOW(0)
0000bf 93ea      	ST   -Y,R30
0000c0 e0a0      	LDI  R26,LOW(0)
0000c1 940e 02b1 	CALL _lcd_gotoxy
                 ; 0000 008A       lcd_puts(str);
0000c3 e6a0      	LDI  R26,LOW(_str)
0000c4 e0b2      	LDI  R27,HIGH(_str)
0000c5 940e 02ee 	CALL _lcd_puts
                 ; 0000 008B 
                 ; 0000 008C       }
0000c7 cfdb      	RJMP _0x3
                 ; 0000 008D }
                 _0x7:
0000c8 cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000c9 93ba      	ST   -Y,R27
0000ca 93aa      	ST   -Y,R26
0000cb 931a      	ST   -Y,R17
0000cc 930a      	ST   -Y,R16
0000cd 81aa      	LDD  R26,Y+2
0000ce 81bb      	LDD  R27,Y+2+1
0000cf 9612      	ADIW R26,2
0000d0 940e 0399 	CALL __GETW1P
0000d2 9730      	SBIW R30,0
0000d3 f159      	BREQ _0x2000010
0000d4 81aa      	LDD  R26,Y+2
0000d5 81bb      	LDD  R27,Y+2+1
0000d6 9614      	ADIW R26,4
0000d7 940e 0399 	CALL __GETW1P
0000d9 018f      	MOVW R16,R30
0000da 9730      	SBIW R30,0
0000db f061      	BREQ _0x2000012
                +
0000dc 3002     +CPI R16 , LOW ( 2 )
0000dd e0e0     +LDI R30 , HIGH ( 2 )
0000de 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000df f098      	BRLO _0x2000013
0000e0 01f8      	MOVW R30,R16
0000e1 9731      	SBIW R30,1
0000e2 018f      	MOVW R16,R30
                +
0000e3 81aa     +LDD R26 , Y + 2
0000e4 81bb     +LDD R27 , Y + 2 + 1
0000e5 9614     +ADIW R26 , 4
0000e6 93ed     +ST X + , R30
0000e7 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000e8 81aa      	LDD  R26,Y+2
0000e9 81bb      	LDD  R27,Y+2+1
0000ea 9612      	ADIW R26,2
0000eb 91ed      	LD   R30,X+
0000ec 91fd      	LD   R31,X+
0000ed 9631      	ADIW R30,1
0000ee 93fe      	ST   -X,R31
0000ef 93ee      	ST   -X,R30
0000f0 9731      	SBIW R30,1
0000f1 81ac      	LDD  R26,Y+4
0000f2 83a0      	STD  Z+0,R26
                 _0x2000013:
0000f3 81aa      	LDD  R26,Y+2
0000f4 81bb      	LDD  R27,Y+2+1
0000f5 940e 0399 	CALL __GETW1P
0000f7 23ff      	TST  R31
0000f8 f02a      	BRMI _0x2000014
0000f9 91ed      	LD   R30,X+
0000fa 91fd      	LD   R31,X+
0000fb 9631      	ADIW R30,1
0000fc 93fe      	ST   -X,R31
0000fd 93ee      	ST   -X,R30
                 _0x2000014:
0000fe c006      	RJMP _0x2000015
                 _0x2000010:
0000ff 81aa      	LDD  R26,Y+2
000100 81bb      	LDD  R27,Y+2+1
000101 efef      	LDI  R30,LOW(65535)
000102 efff      	LDI  R31,HIGH(65535)
000103 93ed      	ST   X+,R30
000104 93fc      	ST   X,R31
                 _0x2000015:
000105 8119      	LDD  R17,Y+1
000106 8108      	LDD  R16,Y+0
000107 9625      	ADIW R28,5
000108 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000109 93ba      	ST   -Y,R27
00010a 93aa      	ST   -Y,R26
00010b 9726      	SBIW R28,6
00010c 940e 03a6 	CALL __SAVELOCR6
00010e e010      	LDI  R17,0
00010f 85ac      	LDD  R26,Y+12
000110 85bd      	LDD  R27,Y+12+1
000111 e0e0      	LDI  R30,LOW(0)
000112 e0f0      	LDI  R31,HIGH(0)
000113 93ed      	ST   X+,R30
000114 93fc      	ST   X,R31
                 _0x2000016:
000115 89ea      	LDD  R30,Y+18
000116 89fb      	LDD  R31,Y+18+1
000117 9631      	ADIW R30,1
000118 8bea      	STD  Y+18,R30
000119 8bfb      	STD  Y+18+1,R31
00011a 9731      	SBIW R30,1
00011b 91e4      	LPM  R30,Z
00011c 2f2e      	MOV  R18,R30
00011d 30e0      	CPI  R30,0
00011e f409      	BRNE PC+2
00011f c115      	RJMP _0x2000018
000120 2fe1      	MOV  R30,R17
000121 30e0      	CPI  R30,0
000122 f439      	BRNE _0x200001C
000123 3225      	CPI  R18,37
000124 f411      	BRNE _0x200001D
000125 e011      	LDI  R17,LOW(1)
000126 c002      	RJMP _0x200001E
                 _0x200001D:
000127 940e 035c 	CALL SUBOPT_0x0
                 _0x200001E:
000129 c10a      	RJMP _0x200001B
                 _0x200001C:
00012a 30e1      	CPI  R30,LOW(0x1)
00012b f4a9      	BRNE _0x200001F
00012c 3225      	CPI  R18,37
00012d f419      	BRNE _0x2000020
00012e 940e 035c 	CALL SUBOPT_0x0
000130 c102      	RJMP _0x20000CC
                 _0x2000020:
000131 e012      	LDI  R17,LOW(2)
000132 e040      	LDI  R20,LOW(0)
000133 e000      	LDI  R16,LOW(0)
000134 322d      	CPI  R18,45
000135 f411      	BRNE _0x2000021
000136 e001      	LDI  R16,LOW(1)
000137 c0fc      	RJMP _0x200001B
                 _0x2000021:
000138 322b      	CPI  R18,43
000139 f411      	BRNE _0x2000022
00013a e24b      	LDI  R20,LOW(43)
00013b c0f8      	RJMP _0x200001B
                 _0x2000022:
00013c 3220      	CPI  R18,32
00013d f411      	BRNE _0x2000023
00013e e240      	LDI  R20,LOW(32)
00013f c0f4      	RJMP _0x200001B
                 _0x2000023:
000140 c002      	RJMP _0x2000024
                 _0x200001F:
000141 30e2      	CPI  R30,LOW(0x2)
000142 f439      	BRNE _0x2000025
                 _0x2000024:
000143 e050      	LDI  R21,LOW(0)
000144 e013      	LDI  R17,LOW(3)
000145 3320      	CPI  R18,48
000146 f411      	BRNE _0x2000026
000147 6800      	ORI  R16,LOW(128)
000148 c0eb      	RJMP _0x200001B
                 _0x2000026:
000149 c003      	RJMP _0x2000027
                 _0x2000025:
00014a 30e3      	CPI  R30,LOW(0x3)
00014b f009      	BREQ PC+2
00014c c0e7      	RJMP _0x200001B
                 _0x2000027:
00014d 3320      	CPI  R18,48
00014e f010      	BRLO _0x200002A
00014f 332a      	CPI  R18,58
000150 f008      	BRLO _0x200002B
                 _0x200002A:
000151 c007      	RJMP _0x2000029
                 _0x200002B:
000152 e0aa      	LDI  R26,LOW(10)
000153 9f5a      	MUL  R21,R26
000154 2d50      	MOV  R21,R0
000155 2fe2      	MOV  R30,R18
000156 53e0      	SUBI R30,LOW(48)
000157 0f5e      	ADD  R21,R30
000158 c0db      	RJMP _0x200001B
                 _0x2000029:
000159 2fe2      	MOV  R30,R18
00015a 36e3      	CPI  R30,LOW(0x63)
00015b f449      	BRNE _0x200002F
00015c 940e 0363 	CALL SUBOPT_0x1
00015e 89e8      	LDD  R30,Y+16
00015f 89f9      	LDD  R31,Y+16+1
000160 81a4      	LDD  R26,Z+4
000161 93aa      	ST   -Y,R26
000162 940e 0369 	CALL SUBOPT_0x2
000164 c0ce      	RJMP _0x2000030
                 _0x200002F:
000165 37e3      	CPI  R30,LOW(0x73)
000166 f441      	BRNE _0x2000032
000167 940e 0363 	CALL SUBOPT_0x1
000169 940e 036f 	CALL SUBOPT_0x3
00016b 940e 0343 	CALL _strlen
00016d 2f1e      	MOV  R17,R30
00016e c00a      	RJMP _0x2000033
                 _0x2000032:
00016f 37e0      	CPI  R30,LOW(0x70)
000170 f461      	BRNE _0x2000035
000171 940e 0363 	CALL SUBOPT_0x1
000173 940e 036f 	CALL SUBOPT_0x3
000175 940e 034f 	CALL _strlenf
000177 2f1e      	MOV  R17,R30
000178 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000179 6002      	ORI  R16,LOW(2)
00017a 770f      	ANDI R16,LOW(127)
00017b e030      	LDI  R19,LOW(0)
00017c c034      	RJMP _0x2000036
                 _0x2000035:
00017d 36e4      	CPI  R30,LOW(0x64)
00017e f011      	BREQ _0x2000039
00017f 36e9      	CPI  R30,LOW(0x69)
000180 f411      	BRNE _0x200003A
                 _0x2000039:
000181 6004      	ORI  R16,LOW(4)
000182 c002      	RJMP _0x200003B
                 _0x200003A:
000183 37e5      	CPI  R30,LOW(0x75)
000184 f431      	BRNE _0x200003C
                 _0x200003B:
000185 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000186 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000187 83ee      	STD  Y+6,R30
000188 83ff      	STD  Y+6+1,R31
000189 e015      	LDI  R17,LOW(5)
00018a c00c      	RJMP _0x200003D
                 _0x200003C:
00018b 35e8      	CPI  R30,LOW(0x58)
00018c f411      	BRNE _0x200003F
00018d 6008      	ORI  R16,LOW(8)
00018e c003      	RJMP _0x2000040
                 _0x200003F:
00018f 37e8      	CPI  R30,LOW(0x78)
000190 f009      	BREQ PC+2
000191 c0a1      	RJMP _0x2000071
                 _0x2000040:
000192 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000193 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000194 83ee      	STD  Y+6,R30
000195 83ff      	STD  Y+6+1,R31
000196 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000197 ff02      	SBRS R16,2
000198 c014      	RJMP _0x2000042
000199 940e 0363 	CALL SUBOPT_0x1
00019b 940e 0379 	CALL SUBOPT_0x4
00019d 85ab      	LDD  R26,Y+11
00019e 23aa      	TST  R26
00019f f43a      	BRPL _0x2000043
0001a0 85ea      	LDD  R30,Y+10
0001a1 85fb      	LDD  R31,Y+10+1
0001a2 940e 0395 	CALL __ANEGW1
0001a4 87ea      	STD  Y+10,R30
0001a5 87fb      	STD  Y+10+1,R31
0001a6 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001a7 3040      	CPI  R20,0
0001a8 f011      	BREQ _0x2000044
0001a9 5f1f      	SUBI R17,-LOW(1)
0001aa c001      	RJMP _0x2000045
                 _0x2000044:
0001ab 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001ac c004      	RJMP _0x2000046
                 _0x2000042:
0001ad 940e 0363 	CALL SUBOPT_0x1
0001af 940e 0379 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001b1 fd00      	SBRC R16,0
0001b2 c011      	RJMP _0x2000047
                 _0x2000048:
0001b3 1715      	CP   R17,R21
0001b4 f478      	BRSH _0x200004A
0001b5 ff07      	SBRS R16,7
0001b6 c008      	RJMP _0x200004B
0001b7 ff02      	SBRS R16,2
0001b8 c004      	RJMP _0x200004C
0001b9 7f0b      	ANDI R16,LOW(251)
0001ba 2f24      	MOV  R18,R20
0001bb 5011      	SUBI R17,LOW(1)
0001bc c001      	RJMP _0x200004D
                 _0x200004C:
0001bd e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001be c001      	RJMP _0x200004E
                 _0x200004B:
0001bf e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001c0 940e 035c 	CALL SUBOPT_0x0
0001c2 5051      	SUBI R21,LOW(1)
0001c3 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001c4 2f31      	MOV  R19,R17
0001c5 ff01      	SBRS R16,1
0001c6 c017      	RJMP _0x200004F
                 _0x2000050:
0001c7 3030      	CPI  R19,0
0001c8 f0a1      	BREQ _0x2000052
0001c9 ff03      	SBRS R16,3
0001ca c006      	RJMP _0x2000053
0001cb 81ee      	LDD  R30,Y+6
0001cc 81ff      	LDD  R31,Y+6+1
0001cd 9125      	LPM  R18,Z+
0001ce 83ee      	STD  Y+6,R30
0001cf 83ff      	STD  Y+6+1,R31
0001d0 c005      	RJMP _0x2000054
                 _0x2000053:
0001d1 81ae      	LDD  R26,Y+6
0001d2 81bf      	LDD  R27,Y+6+1
0001d3 912d      	LD   R18,X+
0001d4 83ae      	STD  Y+6,R26
0001d5 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001d6 940e 035c 	CALL SUBOPT_0x0
0001d8 3050      	CPI  R21,0
0001d9 f009      	BREQ _0x2000055
0001da 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001db 5031      	SUBI R19,LOW(1)
0001dc cfea      	RJMP _0x2000050
                 _0x2000052:
0001dd c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001de e320      	LDI  R18,LOW(48)
0001df 81ee      	LDD  R30,Y+6
0001e0 81ff      	LDD  R31,Y+6+1
0001e1 940e 039d 	CALL __GETW1PF
0001e3 87e8      	STD  Y+8,R30
0001e4 87f9      	STD  Y+8+1,R31
0001e5 81ee      	LDD  R30,Y+6
0001e6 81ff      	LDD  R31,Y+6+1
0001e7 9632      	ADIW R30,2
0001e8 83ee      	STD  Y+6,R30
0001e9 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001ea 85e8      	LDD  R30,Y+8
0001eb 85f9      	LDD  R31,Y+8+1
0001ec 85aa      	LDD  R26,Y+10
0001ed 85bb      	LDD  R27,Y+10+1
0001ee 17ae      	CP   R26,R30
0001ef 07bf      	CPC  R27,R31
0001f0 f050      	BRLO _0x200005C
0001f1 5f2f      	SUBI R18,-LOW(1)
0001f2 85a8      	LDD  R26,Y+8
0001f3 85b9      	LDD  R27,Y+8+1
0001f4 85ea      	LDD  R30,Y+10
0001f5 85fb      	LDD  R31,Y+10+1
0001f6 1bea      	SUB  R30,R26
0001f7 0bfb      	SBC  R31,R27
0001f8 87ea      	STD  Y+10,R30
0001f9 87fb      	STD  Y+10+1,R31
0001fa cfef      	RJMP _0x200005A
                 _0x200005C:
0001fb 332a      	CPI  R18,58
0001fc f028      	BRLO _0x200005D
0001fd ff03      	SBRS R16,3
0001fe c002      	RJMP _0x200005E
0001ff 5f29      	SUBI R18,-LOW(7)
000200 c001      	RJMP _0x200005F
                 _0x200005E:
000201 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000202 fd04      	SBRC R16,4
000203 c01a      	RJMP _0x2000061
000204 3321      	CPI  R18,49
000205 f420      	BRSH _0x2000063
000206 85a8      	LDD  R26,Y+8
000207 85b9      	LDD  R27,Y+8+1
000208 9711      	SBIW R26,1
000209 f409      	BRNE _0x2000062
                 _0x2000063:
00020a c009      	RJMP _0x20000CD
                 _0x2000062:
00020b 1753      	CP   R21,R19
00020c f010      	BRLO _0x2000067
00020d ff00      	SBRS R16,0
00020e c001      	RJMP _0x2000068
                 _0x2000067:
00020f c013      	RJMP _0x2000066
                 _0x2000068:
000210 e220      	LDI  R18,LOW(32)
000211 ff07      	SBRS R16,7
000212 c00b      	RJMP _0x2000069
000213 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000214 6100      	ORI  R16,LOW(16)
000215 ff02      	SBRS R16,2
000216 c007      	RJMP _0x200006A
000217 7f0b      	ANDI R16,LOW(251)
000218 934a      	ST   -Y,R20
000219 940e 0369 	CALL SUBOPT_0x2
00021b 3050      	CPI  R21,0
00021c f009      	BREQ _0x200006B
00021d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00021e 940e 035c 	CALL SUBOPT_0x0
000220 3050      	CPI  R21,0
000221 f009      	BREQ _0x200006C
000222 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000223 5031      	SUBI R19,LOW(1)
000224 85a8      	LDD  R26,Y+8
000225 85b9      	LDD  R27,Y+8+1
000226 9712      	SBIW R26,2
000227 f008      	BRLO _0x2000059
000228 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000229 ff00      	SBRS R16,0
00022a c008      	RJMP _0x200006D
                 _0x200006E:
00022b 3050      	CPI  R21,0
00022c f031      	BREQ _0x2000070
00022d 5051      	SUBI R21,LOW(1)
00022e e2e0      	LDI  R30,LOW(32)
00022f 93ea      	ST   -Y,R30
000230 940e 0369 	CALL SUBOPT_0x2
000232 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000233 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000234 cee0      	RJMP _0x2000016
                 _0x2000018:
000235 85ac      	LDD  R26,Y+12
000236 85bd      	LDD  R27,Y+12+1
000237 940e 0399 	CALL __GETW1P
000239 940e 03ad 	CALL __LOADLOCR6
00023b 9664      	ADIW R28,20
00023c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00023d 92ff      	PUSH R15
00023e 2ef8      	MOV  R15,R24
00023f 9726      	SBIW R28,6
000240 940e 03a8 	CALL __SAVELOCR4
000242 940e 0381 	CALL SUBOPT_0x5
000244 9730      	SBIW R30,0
000245 f419      	BRNE _0x2000072
000246 efef      	LDI  R30,LOW(65535)
000247 efff      	LDI  R31,HIGH(65535)
000248 c023      	RJMP _0x2080002
                 _0x2000072:
000249 01de      	MOVW R26,R28
00024a 9616      	ADIW R26,6
00024b 940e 0391 	CALL __ADDW2R15
00024d 018d      	MOVW R16,R26
00024e 940e 0381 	CALL SUBOPT_0x5
000250 83ee      	STD  Y+6,R30
000251 83ff      	STD  Y+6+1,R31
000252 e0e0      	LDI  R30,LOW(0)
000253 87e8      	STD  Y+8,R30
000254 87e9      	STD  Y+8+1,R30
000255 01de      	MOVW R26,R28
000256 961a      	ADIW R26,10
000257 940e 0391 	CALL __ADDW2R15
000259 940e 0399 	CALL __GETW1P
00025b 93fa      	ST   -Y,R31
00025c 93ea      	ST   -Y,R30
00025d 931a      	ST   -Y,R17
00025e 930a      	ST   -Y,R16
00025f ece9      	LDI  R30,LOW(_put_buff_G100)
000260 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000261 93fa      	ST   -Y,R31
000262 93ea      	ST   -Y,R30
000263 01de      	MOVW R26,R28
000264 961a      	ADIW R26,10
000265 dea3      	RCALL __print_G100
000266 019f      	MOVW R18,R30
000267 81ae      	LDD  R26,Y+6
000268 81bf      	LDD  R27,Y+6+1
000269 e0e0      	LDI  R30,LOW(0)
00026a 93ec      	ST   X,R30
00026b 01f9      	MOVW R30,R18
                 _0x2080002:
00026c 940e 03af 	CALL __LOADLOCR4
00026e 962a      	ADIW R28,10
00026f 90ff      	POP  R15
000270 9508      	RET
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
                 ; .FSTART __lcd_delay_G101
000271 e0ff          ldi   r31,15
                 __lcd_delay0:
000272 95fa          dec   r31
000273 f7f1          brne  __lcd_delay0
000274 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000275 b3a1          in    r26,__lcd_direction
000276 70af          andi  r26,0xf                 ;set as input
000277 bba1          out   __lcd_direction,r26
000278 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000279 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00027a dff6      	RCALL __lcd_delay_G101
00027b 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00027c dff4      	RCALL __lcd_delay_G101
00027d b3a0          in    r26,__lcd_pin
00027e 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00027f dff1      	RCALL __lcd_delay_G101
000280 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000281 dfef      	RCALL __lcd_delay_G101
000282 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000283 fda7          sbrc  r26,__lcd_busy_flag
000284 cff5          rjmp  __lcd_busy
000285 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000286 7fa0          andi  r26,0xf0
000287 2bab          or    r26,r27
000288 bba2          out   __lcd_port,r26          ;write
000289 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00028a 940e 0271 	CALL __lcd_delay_G101
00028c 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00028d 940e 0271 	CALL __lcd_delay_G101
00028f 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000290 93aa      	ST   -Y,R26
000291 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000292 b3a1          in    r26,__lcd_direction
000293 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000294 bba1          out   __lcd_direction,r26
000295 b3b2          in    r27,__lcd_port
000296 70bf          andi  r27,0xf
000297 81a8          ld    r26,y
000298 dfed      	RCALL __lcd_write_nibble_G101
000299 81a8          ld    r26,y
00029a 95a2          swap  r26
00029b dfea      	RCALL __lcd_write_nibble_G101
00029c 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00029d 940c 0341 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G101:
                 ; .FSTART __lcd_read_nibble_G101
00029f 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0002a0 940e 0271 	CALL __lcd_delay_G101
0002a2 b3e0          in    r30,__lcd_pin           ;read
0002a3 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0002a4 940e 0271 	CALL __lcd_delay_G101
0002a6 7fe0          andi  r30,0xf0
0002a7 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G101:
                 ; .FSTART _lcd_read_byte0_G101
0002a8 940e 0271 	CALL __lcd_delay_G101
0002aa dff4      	RCALL __lcd_read_nibble_G101
0002ab 2fae          mov   r26,r30
0002ac dff2      	RCALL __lcd_read_nibble_G101
0002ad 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
0002ae 95e2          swap  r30
0002af 2bea          or    r30,r26
0002b0 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002b1 93aa      	ST   -Y,R26
0002b2 940e 0275 	CALL __lcd_ready
0002b4 81e8      	LD   R30,Y
0002b5 e0f0      	LDI  R31,0
0002b6 58ef      	SUBI R30,LOW(-__base_y_G101)
0002b7 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002b8 81e0      	LD   R30,Z
0002b9 81a9      	LDD  R26,Y+1
0002ba 0fae      	ADD  R26,R30
0002bb 940e 0290 	CALL __lcd_write_data
0002bd 8099      	LDD  R9,Y+1
0002be 8088      	LDD  R8,Y+0
0002bf 9622      	ADIW R28,2
0002c0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002c1 940e 0275 	CALL __lcd_ready
0002c3 e0a2      	LDI  R26,LOW(2)
0002c4 940e 0290 	CALL __lcd_write_data
0002c6 940e 0275 	CALL __lcd_ready
0002c8 e0ac      	LDI  R26,LOW(12)
0002c9 940e 0290 	CALL __lcd_write_data
0002cb 940e 0275 	CALL __lcd_ready
0002cd e0a1      	LDI  R26,LOW(1)
0002ce 940e 0290 	CALL __lcd_write_data
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 2e8e      	MOV  R8,R30
0002d2 2e9e      	MOV  R9,R30
0002d3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002d4 93aa      	ST   -Y,R26
0002d5 93ef          push r30
0002d6 93ff          push r31
0002d7 81a8          ld   r26,y
0002d8 9468          set
0002d9 30aa          cpi  r26,10
0002da f019          breq __lcd_putchar1
0002db 94e8          clt
0002dc 149b      	CP   R9,R11
0002dd f030      	BRLO _0x2020004
                 	__lcd_putchar1:
0002de 9483      	INC  R8
0002df e0e0      	LDI  R30,LOW(0)
0002e0 93ea      	ST   -Y,R30
0002e1 2da8      	MOV  R26,R8
0002e2 dfce      	RCALL _lcd_gotoxy
0002e3 f036      	brts __lcd_putchar0
                 _0x2020004:
0002e4 9493      	INC  R9
0002e5 df8f          rcall __lcd_ready
0002e6 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
0002e7 81a8      	LD   R26,Y
0002e8 940e 0290 	CALL __lcd_write_data
                 __lcd_putchar0:
0002ea 91ff          pop  r31
0002eb 91ef          pop  r30
0002ec 940c 0341 	JMP  _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002ee 93ba      	ST   -Y,R27
0002ef 93aa      	ST   -Y,R26
0002f0 931a      	ST   -Y,R17
                 _0x2020005:
0002f1 81a9      	LDD  R26,Y+1
0002f2 81ba      	LDD  R27,Y+1+1
0002f3 91ed      	LD   R30,X+
0002f4 83a9      	STD  Y+1,R26
0002f5 83ba      	STD  Y+1+1,R27
0002f6 2f1e      	MOV  R17,R30
0002f7 30e0      	CPI  R30,0
0002f8 f019      	BREQ _0x2020007
0002f9 2fa1      	MOV  R26,R17
0002fa dfd9      	RCALL _lcd_putchar
0002fb cff5      	RJMP _0x2020005
                 _0x2020007:
0002fc 8118      	LDD  R17,Y+0
0002fd 9623      	ADIW R28,3
0002fe 9508      	RET
                 ; .FEND
                 __long_delay_G101:
                 ; .FSTART __long_delay_G101
0002ff 27aa          clr   r26
000300 27bb          clr   r27
                 __long_delay0:
000301 9711          sbiw  r26,1         ;2 cycles
000302 f7f1          brne  __long_delay0 ;2 cycles
000303 9508      	RET
                 ; .FEND
                 __lcd_init_write_G101:
                 ; .FSTART __lcd_init_write_G101
000304 93aa      	ST   -Y,R26
000305 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000306 b3a1          in    r26,__lcd_direction
000307 6fa7          ori   r26,0xf7                ;set as output
000308 bba1          out   __lcd_direction,r26
000309 b3b2          in    r27,__lcd_port
00030a 70bf          andi  r27,0xf
00030b 81a8          ld    r26,y
00030c 940e 0286 	CALL __lcd_write_nibble_G101
00030e 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00030f c031      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000310 93aa      	ST   -Y,R26
000311 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000312 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
000313 80b8      	LDD  R11,Y+0
000314 81e8      	LD   R30,Y
000315 58e0      	SUBI R30,-LOW(128)
                +
000316 93e0 0273+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000318 81e8      	LD   R30,Y
000319 54e0      	SUBI R30,-LOW(192)
                +
00031a 93e0 0274+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00031c 940e 0388 	CALL SUBOPT_0x6
00031e 940e 0388 	CALL SUBOPT_0x6
000320 940e 0388 	CALL SUBOPT_0x6
000322 dfdc      	RCALL __long_delay_G101
000323 e2a0      	LDI  R26,LOW(32)
000324 dfdf      	RCALL __lcd_init_write_G101
000325 dfd9      	RCALL __long_delay_G101
000326 e2a8      	LDI  R26,LOW(40)
000327 940e 038d 	CALL SUBOPT_0x7
000329 e0a4      	LDI  R26,LOW(4)
00032a 940e 038d 	CALL SUBOPT_0x7
00032c e8a5      	LDI  R26,LOW(133)
00032d 940e 038d 	CALL SUBOPT_0x7
00032f b3a1          in    r26,__lcd_direction
000330 70af          andi  r26,0xf                 ;set as input
000331 bba1          out   __lcd_direction,r26
000332 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000333 940e 02a8 	CALL _lcd_read_byte0_G101
000335 30e5      	CPI  R30,LOW(0x5)
000336 f011      	BREQ _0x202000B
000337 e0e0      	LDI  R30,LOW(0)
000338 c008      	RJMP _0x2080001
                 _0x202000B:
000339 940e 0275 	CALL __lcd_ready
00033b e0a6      	LDI  R26,LOW(6)
00033c 940e 0290 	CALL __lcd_write_data
00033e 940e 02c1 	CALL _lcd_clear
000340 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
000341 9621      	ADIW R28,1
000342 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000343 93ba      	ST   -Y,R27
000344 93aa      	ST   -Y,R26
000345 91a9          ld   r26,y+
000346 91b9          ld   r27,y+
000347 27ee          clr  r30
000348 27ff          clr  r31
                 strlen0:
000349 916d          ld   r22,x+
00034a 2366          tst  r22
00034b f011          breq strlen1
00034c 9631          adiw r30,1
00034d cffb          rjmp strlen0
                 strlen1:
00034e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00034f 93ba      	ST   -Y,R27
000350 93aa      	ST   -Y,R26
000351 27aa          clr  r26
000352 27bb          clr  r27
000353 91e9          ld   r30,y+
000354 91f9          ld   r31,y+
                 strlenf0:
000355 9005      	lpm  r0,z+
000356 2000          tst  r0
000357 f011          breq strlenf1
000358 9611          adiw r26,1
000359 cffb          rjmp strlenf0
                 strlenf1:
00035a 01fd          movw r30,r26
00035b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000260           	.BYTE 0x11
                 __base_y_G101:
000271           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00035c 932a      	ST   -Y,R18
00035d 85ad      	LDD  R26,Y+13
00035e 85be      	LDD  R27,Y+13+1
00035f 85ef      	LDD  R30,Y+15
000360 89f8      	LDD  R31,Y+15+1
000361 9509      	ICALL
000362 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000363 89e8      	LDD  R30,Y+16
000364 89f9      	LDD  R31,Y+16+1
000365 9734      	SBIW R30,4
000366 8be8      	STD  Y+16,R30
000367 8bf9      	STD  Y+16+1,R31
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000369 85ad      	LDD  R26,Y+13
00036a 85be      	LDD  R27,Y+13+1
00036b 85ef      	LDD  R30,Y+15
00036c 89f8      	LDD  R31,Y+15+1
00036d 9509      	ICALL
00036e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00036f 89a8      	LDD  R26,Y+16
000370 89b9      	LDD  R27,Y+16+1
000371 9614      	ADIW R26,4
000372 940e 0399 	CALL __GETW1P
000374 83ee      	STD  Y+6,R30
000375 83ff      	STD  Y+6+1,R31
000376 81ae      	LDD  R26,Y+6
000377 81bf      	LDD  R27,Y+6+1
000378 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000379 89a8      	LDD  R26,Y+16
00037a 89b9      	LDD  R27,Y+16+1
00037b 9614      	ADIW R26,4
00037c 940e 0399 	CALL __GETW1P
00037e 87ea      	STD  Y+10,R30
00037f 87fb      	STD  Y+10+1,R31
000380 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000381 01de      	MOVW R26,R28
000382 961c      	ADIW R26,12
000383 940e 0391 	CALL __ADDW2R15
000385 940e 0399 	CALL __GETW1P
000387 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000388 940e 02ff 	CALL __long_delay_G101
00038a e3a0      	LDI  R26,LOW(48)
00038b 940c 0304 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00038d 940e 0290 	CALL __lcd_write_data
00038f 940c 02ff 	JMP  __long_delay_G101
                 
                 
                 	.CSEG
                 __ADDW2R15:
000391 2400      	CLR  R0
000392 0daf      	ADD  R26,R15
000393 1db0      	ADC  R27,R0
000394 9508      	RET
                 
                 __ANEGW1:
000395 95f1      	NEG  R31
000396 95e1      	NEG  R30
000397 40f0      	SBCI R31,0
000398 9508      	RET
                 
                 __GETW1P:
000399 91ed      	LD   R30,X+
00039a 91fc      	LD   R31,X
00039b 9711      	SBIW R26,1
00039c 9508      	RET
                 
                 __GETW1PF:
00039d 9005      	LPM  R0,Z+
00039e 91f4      	LPM  R31,Z
00039f 2de0      	MOV  R30,R0
0003a0 9508      	RET
                 
                 __PUTPARD1:
0003a1 937a      	ST   -Y,R23
0003a2 936a      	ST   -Y,R22
0003a3 93fa      	ST   -Y,R31
0003a4 93ea      	ST   -Y,R30
0003a5 9508      	RET
                 
                 __SAVELOCR6:
0003a6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003a7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003a8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003a9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003aa 931a      	ST   -Y,R17
0003ab 930a      	ST   -Y,R16
0003ac 9508      	RET
                 
                 __LOADLOCR6:
0003ad 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ae 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003af 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003b0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003b1 8119      	LDD  R17,Y+1
0003b2 8108      	LD   R16,Y
0003b3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   3 r7 :   0 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:   9 r25:   2 r26: 112 r27:  41 r28:  14 r29:   1 r30: 199 r31:  65 
x  :  23 y  : 169 z  :  15 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  23 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  70 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  33 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   2 jmp   :  26 ld    :  26 ldd   :  77 ldi   :  83 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  17 movw  :  19 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  46 pop   :   3 push  :   3 rcall :  15 ret   :  28 
reti  :   1 rjmp  :  58 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :  16 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   2 
tst   :   4 wdr   :   0 
Instructions used: 56 out of 116 (48.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000768   1858     38   1896   32768   5.8%
[.dseg] 0x000060 0x000275      0     21     21    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
